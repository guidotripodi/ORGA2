insertar_nodo_en_nivel:
;nodo *insertar_nodo_en_nivel(nodo **nivel, char c)
	CALL nodo_buscar
	ret
nodo_buscar:
;nodo *nodo_buscar(nodo *n, char c)
	MOV R15, RDI
	MOV R14, RSI
	CMP [R15 + offset_c], R14 
	je .nodoSi
	CMP [R15 + offset_c], R14
	JL .agregarNodo
	Mov RDX, R15
	CMP qword[R15 + offset_sig], NULL
	JNE .sigueGirando
	call .agregarNodo
	ret
.sigueGirando:
	lea r15, [r15 + offset_sig] 
	MOV RDI, R15
	MOV RSI, R14
	call nodo_buscar
	ret
.nodoSi:
	MOV RDI, R15 
	RET
.agregarNodo:
	; en rdi tengo el nodo siguiente
	;en rsi tengo el caracter del nodo q tengo q agregar
	; en rdx tengo el nodo anterior si es que hay anterior
	CMP RDX, RDI
	JE .noHayAnterior
	
	Mov r13, rdi ; muevo el siguiente
	MOV r14, rdx; muevo el anterior
	MOV R15, rsi; muevo el caracter
	MOV RDI, size_nodo ; le doy el tamaño al nodo
	CALL malloc
	
	MOV [RAX+offset_sig], R13
	MOV  qword [RAX+offset_hijos], NULL
	MOV [RAX+offset_c], R15
	MOV byte [RAX+offset_fin], FALSE
	
	MOV [RDX+offset_sig], RAX
	RET
.noHayAnterior:
	
	Mov r13, rdi ; muevo el siguiente
	MOV r14, rdx; muevo el anterior
	MOV R15, rsi; muevo el caracter
	MOV RDI, size_nodo ; le doy el tamaño al nodo
	CALL malloc
	
	MOV [RAX+offset_sig], R13
	MOV qword [RAX+offset_hijos], NULL
	MOV [RAX+offset_c], R15
	MOV byte [RAX+offset_fin], FALSE
	RET
